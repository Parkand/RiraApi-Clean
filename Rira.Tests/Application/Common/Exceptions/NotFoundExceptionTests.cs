using Xunit;
using FluentAssertions;
using Rira.Application.Common.Exceptions;

namespace Rira.Tests.Application.Common.Exceptions
{
    /// <summary>
    /// ✅ تست واحد کامل برای کلاس NotFoundException
    /// ---------------------------------------------------------------
    /// این Exception در مواقعی استفاده می‌شود که داده‌ای با شناسه مشخص یافت نشود.
    /// برای مثال: در سرویس TaskService وقتی تسک مورد نظر در DB وجود ندارد.
    ///
    /// هدف تست:
    ///   ▫ بررسی صحت مقداردهی EntityName و Key
    ///   ▫ بررسی تولید پیام صحیح و خوانا
    ///   ▫ سازنده‌های مختلف (با و بدون شناسه)
    ///   ▫ بررسی نوع داده‌های Key مختلف
    /// </summary>
    public class NotFoundExceptionTests
    {
        // ======================================================================================================
        // 🔹 تست ۱: سازنده اصلی با EntityName و Key
        // ------------------------------------------------------------------------------------------------------
        // بررسی می‌کنیم پیام تولیدی درست باشد و پراپرتی‌ها به‌درستی مقداردهی شوند.
        // ======================================================================================================
        [Fact]
        public void Constructor_Should_Create_Correct_Message_And_Set_Properties()
        {
            // 🧩 آماده داده تست
            string entity = "Task";
            int id = 42;

            // 🧪 اجرای Exception
            var exception = new NotFoundException(entity, id);

            // ✅ بررسی خروجی
            exception.EntityName.Should().Be(entity, "نام موجودیت باید همان مقداری باشد که ارسال کردیم.");
            exception.Key.Should().Be(id, "شناسه باید دقیقاً برابر داده ورودی باشد.");
            exception.Message.Should().Contain(entity, "پیام خطا باید نام موجودیت را شامل شود.");
            exception.Message.Should().Contain(id.ToString(), "پیام باید شناسه را نیز ذکر کند.");
            exception.Message.Should().StartWith("موجودیت", "الگوی پیام باید فارسی استاندارد باشد.");
        }

        // ======================================================================================================
        // 🔹 تست ۲: سازنده با نوع داده مختلف برای Key (مثلاً رشته)
        // ------------------------------------------------------------------------------------------------------
        // بررسی کنیم که Exception با Key از نوع string هم کار کند.
        // ======================================================================================================
        [Fact]
        public void Constructor_Should_Work_With_String_Key()
        {
            var exception = new NotFoundException("User", "USR-123");

            exception.EntityName.Should().Be("User");
            exception.Key.Should().Be("USR-123");
            exception.Message.Should().Contain("USR-123", "باید مقدار کلید متنی در پیام وجود داشته باشد.");
        }

        // ======================================================================================================
        // 🔹 تست ۳: سازنده با پیام ساده (بدون EntityName و Key)
        // ------------------------------------------------------------------------------------------------------
        // بررسی کنیم حالت NotFoundException(string message) نیز مقداردهی درست دارد.
        // ======================================================================================================
        [Fact]
        public void Constructor_Should_Accept_Simple_Message()
        {
            string customMessage = "رکورد مورد نظر یافت نشد.";

            var exception = new NotFoundException(customMessage);

            exception.Message.Should().Be(customMessage, "در حالت ساده، پیام نباید تغییر کند.");
            exception.EntityName.Should().BeNull("در سازنده ساده نمی‌فرستیم، باید null بماند.");
            exception.Key.Should().BeNull("در سازنده ساده نمی‌فرستیم، باید null بماند.");
        }

        // ======================================================================================================
        // 🔹 تست ۴: Message نباید خالی باشد
        // ------------------------------------------------------------------------------------------------------
        // در هیچ‌یک از سازنده‌ها نباید Message خالی تولید شود.
        // ======================================================================================================
        [Fact]
        public void Exception_Should_Always_Have_NonEmpty_Message()
        {
            var exception1 = new NotFoundException("Task", 10);
            var exception2 = new NotFoundException("خطای نمونه");

            exception1.Message.Should().NotBeNullOrEmpty("نباید پیام خالی داشته باشد.");
            exception2.Message.Should().NotBeNullOrEmpty("نباید پیام خالی داشته باشد.");
        }

        // ======================================================================================================
        // 🔹 تست ۵: بررسی ساختار پیام دقیق و فرمت فارسی
        // ------------------------------------------------------------------------------------------------------
        // بررسی دقیق شکل پیام خروجی از سازنده اصلی.
        // ======================================================================================================
        [Fact]
        public void Message_Should_Have_Expected_Format_For_MainConstructor()
        {
            var exception = new NotFoundException("Task", 999);

            string expected = "موجودیت 'Task' با شناسهٔ '999' یافت نشد.";

            exception.Message.Should().Be(expected, "پیام باید دقیقاً مطابق فرمت مورد انتظار فارسی باشد.");
        }

        // ======================================================================================================
        // 🔹 تست ۶: بررسی مقدارها null در سازنده‌های مختلف
        // ------------------------------------------------------------------------------------------------------
        // چون پراپرتی‌ها فقط در سازنده با دو پارامتر تنظیم می‌شوند،
        // در حالت سازنده ساده نباید مقدار داشته باشند.
        // ======================================================================================================
        [Fact]
        public void EntityName_And_Key_Should_Be_Null_If_Using_Simple_Message()
        {
            var exception = new NotFoundException("داده یافت نشد");

            exception.EntityName.Should().BeNull("در سازنده ساده نباید مقداردهی شود.");
            exception.Key.Should().BeNull("در سازنده ساده نباید مقداردهی شود.");
        }
    }
}
